__author__ = 'Andy Gallagher <andy.gallagher@theguardian.com>'

from .vidispine_api import VSApi,InvalidData


class VSResource(VSApi):
    """
    Top-level class that allows access to Vidispine resources.
    """
    def types(self):
        """
        Generator that will yield the different types of resource that are valid in the Vidispine system
        """
        doc = self.request("/resource",method="GET")
        ns = "{http://xml.vidispine.com/schema/vidispine}"

        for n in doc.findall("{0}resourcetype/{0}type".format(ns)):
            yield n.text

    def types_list(self):
        """
        Convenience function to return a list of the types of valid resource
        """
        return [x for x in self.types()]

    def transcoders(self):
        """
        Generator that will yield a VSTranscoderResource for every transcoder currently registered in the Vidispine system
        """
        doc = self.request("/resource/transcoder",method="GET")
        ns = "{http://xml.vidispine.com/schema/vidispine}"
        for resource in doc.findall("{0}resource".format(ns)):
            try:
                vsid = resource.find("{0}id".format(ns)).text
            except Exception as e:
                raise InvalidData("No <id> element in returned resource designation")
            yield VSTranscoderResource(resource.find("{0}transcoder".format(ns)),vsid=vsid,
                                          host=self.host,port=self.port,user=self.user,passwd=self.passwd)


class VSTranscoderResource(object):
    """
    Represents a transcoder resource.  Generated by VSResource::transcoders.
    """

    def __init__(self,doc,vsid="",*args,**kwargs):
        """
        Initialise a new transcoder resource from a parsed XML fragment.
        Normally you should not need to call this, as it is done from VSResource::transcoders.

        :param doc: XML definition fragment, the <transcder> portion of a <ResourceListDocument>
        :param vsid: Vidispine ID of the transcoder in question
        :param args:
        :param kwargs:
        :return: An initialised VSTranscoderResource
        """
        self.name = vsid
        self._doc = doc
        self._ns = "{http://xml.vidispine.com/schema/vidispine}"

    def _valueOrNone(self,path):
        try:
            return self._doc.find("{0}{1}".format(self._ns,path)).text
        except AttributeError:
            return None

    @property
    def url(self):
        """
        :return: URL of the transcoder
        """
        return self._valueOrNone("url")

    @property
    def version(self):
        """
        :return: Version number reported by transcoder
        """
        return self._valueOrNone("version")

    @property
    def reverseAddressDetected(self):
        """
        :return: Address of the Vidispine server, as reported by transcoder
        """
        return self._valueOrNone("reverseAddressDetected")

    @property
    def state(self):
        """
        :return: State, as reported by transcoder
        """
        return self._valueOrNone("state")

    @staticmethod
    def _extractName(tag):
        import re
        parts=re.match(r'\{[^\}]*}(.*)$',tag)
        if parts:
            return parts.group(1)
        return tag

    @property
    def directAccess(self):
        """
        Consult the Vidispine documentation for more information on direct access parameters
        :return: A dictionary consisting of arrays of direct access parameters
        """
        rtn = {}
        for n in self._doc.findall("{0}directAccess/*".format(self._ns)):
            name=self._extractName(n.tag)
            if not name in rtn:
                rtn[name] = []
            rtn[name].append(n.text)
        return rtn
